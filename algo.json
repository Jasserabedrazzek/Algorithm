{
    "Algorithms" : {
        "lire": "input \n a = input('-> ')"  ,
        "ecrire" : "print()\nprint('Hello , World!')"  ,
        "<-" : "= \nnum = 19",
        "" : "= \nnum = 19",
        "alore" : ":\nif a>=b :\n\tprint(a)" ,
        "si" : "if \n if a>=b :\n\tprint(b)",
        "valeur" : "float or int",
        "entier" : "int()",
        "reél" : "float()",
        "reel" : "float()",
        "chaîne de caractères" : "string",
        "afficher" : "print()\n#exe :\nprint('bacmath')# => bacmath",
        "booléen" : "bool",
        "faux" : "False",
        "vrai" : "True",
        "nombre entier" : "integer number",
        "nombres réels" : "real numbers (floating point)",
        "texte" : "" ,
        "": "",
        "None":"",
        "div" :"//",
        "mod" : "%" ,
        "convch" : "str()\n#exe:\nn = 19 ch=str(n)\nprint(ch) #=> ch = '19'",
        "=" : "== \n# exe:\nif a<b :\n\tprint(True)",
        ">=":">=",
        "<=":"<=",
        "!=":"!=",
        "non" : "not",
        "et" : "and" , 
        "ou" : "or",
        "abs" : "abs(x) \n# exe: \nprint(abs(-15)) #=> 15",
        "arrandi" : "round(x)\nprint(round(12.2)) #=> 12",
        "alea" : "from random import randint # or you can use from random import *\nr = randint(1,10)\nprint(r) # exe : r = 5" ,
        "reccine" : "from math import sqrt \nprint(sqrt(x))  # exe:  => sqrt(16) = 4",
        "long": "len(Ch) \n# exe: print(len('Bac Math')) => 8",
        "pos" : "find #exe : \nch = 'bac'\nf = ch.find('a')\nprint(f) #=> f = 1",
        "sous chaine" : "ch[d , f]\n# exe :\nch = 'bacmath'\nprint(ch[0:2]) #=> ch[0:2] = 'bac'",
        "effacer": "ch2 = ch1[:d] + ch1[f:] ",
        "majus": "ch.upper() \n#exe:\nM = 'bac'.upper() #=> M =  'BAC'",
        "estnum" : "isnumeric()\n#exe :\nch = '19' \nprint(ch.isnumeric()) #=> res = True",
        "≠": "!=",
        "tab" : "import numpy as np \nnom_tableau = np.array([Type_element()] * N )   #N entier"  ,
        "tableau" : "import numpy as np \nnom_tableau = np.array([Type_element()] * N )   #N entier"  ,
        "boucle pour" : "for i in range(N)\n\nexe:\nfor i in range(3):\n\tprint(i)\n # i = 0\n # i = 1\n # i = 2",
        "pour" : "for i in range(N)\n\nexe:\nfor i in range(3):\n\tprint(i)\n # i = 0\n # i = 1\n # i = 2",
        "repeter": "while condition:\n\tprint('') ",
        "tant que" : "while condition:\n\tprint('') ",
        "jusqu'a" : "",
        "fonction" : "def \n\n\n#exe:\ndef somme(x):\n\tx = 1+1\n return x",
        "retourner" : "return",
        "procedeur" : "def \n#exe:\ndef pro():\n\tprint('Python')"
        
    }
}